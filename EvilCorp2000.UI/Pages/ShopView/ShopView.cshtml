@page
@using BusinessLayer.Models
@model ShopViewModel
@{
    ViewData["Title"] = "Villain Shop";
}

@* Seitenindividuelle Verwendung von Stylesheets *@
@section Styles {
    <link rel="stylesheet" href="~/css/shopStyle.css" />
}


<div class="shop-toolbar">

    <div class="sort-filter-section">
        <form method="get">
            <input type="hidden" name="Search" value="@Model.Search" />
            <input type="hidden" name="FilterCategoryString" value="@Model.FilterCategoryString" />
            <label for="SortOrderString">Sort by:</label>
            <select id="SortOrderString" name="SortOrderString" class="sorting-filter-select">
                @foreach (var (value, text) in Model.SortOrderAndDisplayStrings)
                {
                    <option value="@value" selected="@(value == Model.SortOrderString)">
                        @text
                    </option>
                }
            </select>
            <button type="submit" class="sf-button">Sort</button>
        </form>
    </div>

    <div class="pagination-wrapper">
        @await Html.PartialAsync("_PaginationPartial", (Model.SortOrderString, Model.PageNumber, Model.MaxPageCount, Model.PageSize))
    </div>


    <div>
        @if (Model._categories != null)
        {
            <div class="sort-filter-section">
                <form method="get">
                    <input type="hidden" name="Search" value="@Model.Search" />
                    <label for="FilterCategoryString">Filter Category:</label>
                    <select id="FilterCategoryString" name="FilterCategoryString" class="sorting-filter-select">
                        <option value="null" selected="@(null == Model.FilterCategory)">
                            No Filter
                        </option>
                        @foreach (CategoryDTO category in Model._categories)
                        {
                            <option value="@category.CategoryId" selected="@(category.CategoryId == Model.FilterCategory)">
                                @category.CategoryName
                            </option>
                        }
                    </select>
                    <button type="submit" class="sf-button">Filter</button>
                </form>
            </div>
        }

        <div class="sort-filter-section">
            <form method="get">
                <input type="hidden" name="FilterCategoryString" value="@Model.FilterCategoryString" />
                <label for="Search">Search:</label>
                <input type="text" id="Search" name="Search" value="@Model.Search" class="sorting-filter-select" placeholder="Search products..." />
                <button type="submit" class="sf-button">Search</button>
            </form>
        </div>
    </div>

</div>


<div class="container">

    <div class="product-grid">

        @foreach (var product in Model.ProductsForSale)
        {
            <div class="product-card">

                <h3>@product.ProductName</h3>
                @if (product.DiscountedPrice.HasValue)
                {
                    <div class="product-box">
                        <img src="@product.ProductPicture" alt="@product.ProductName" />
                        <div class="ribbon">@($"{product.Discount.Value}%")</div>
                    </div>
                }
                else
                {
                    <img src="@product.ProductPicture" alt="@product.ProductName" />
                }

                <p>@product.Description</p>

                <p>
                @if (product.Categories.Count != 1)
                {
                    @foreach (var category in product.Categories)
                    {
                        @category
                        if (category != product.Categories.Last())
                        {
                            <span>- </span>;
                        }
                    }
                }
                else 
                {
                    @product.Categories.First()
                }
                    
                </p>
                

                @if (product.Rating.HasValue)
                {
                    
                    double rating = product.Rating.Value; // z. B. 4.3
                    var fillPercents = Enumerable.Range(0, 5).Select(i =>
                    {
                        if (i < Math.Floor(rating)) return 100;
                        if (i > rating) return 0;
                        return (int)((rating - Math.Floor(rating)) * 100);
                    }).ToList();


                    <div class="stars-container">
                        @for (int i = 0; i < 5; i++)
                        {
                            <span class="star-precise" style="--percent: @fillPercents[i]%">★</span>
                        }
                        <p class="stars-container-ratingNumber">(@product.Rating.Value.ToString())</p>
                    </div>
                }

                @if (product.DiscountedPrice.HasValue)
                {
                    <div class="product-box">
                        <span class="price strike">@product.Price.ToString("C")</span>
                        <span class="highlighted-price">@product.DiscountedPrice.Value.ToString("C")</span>
                    </div>
                }
                else
                {
                    <span class="price">@product.Price.ToString("C")</span>
                }
                <form method="post">
                    <input type="hidden" name="productId" value="@product.ProductId" />
                    <button type="submit">Add to Cart</button>
                </form>
            </div>
        }
    </div>

    @await Html.PartialAsync("_PaginationPartial", (Model.SortOrderString, Model.PageNumber, Model.MaxPageCount, Model.PageSize))

</div>