@using Microsoft.AspNetCore.WebUtilities

@model (string SortOrder, int PageNumber, int MaxPageCount, int PageSize, string? Search, string? FilterCategoryString)

@functions {
    private string BuildPageLink(int pageNumber)
    {
        var queryParams = new Dictionary<string, string?>
        {
            ["SortOrderString"] = Model.SortOrder,
            ["PageSize"] = Model.PageSize.ToString(),
            ["Search"] = Model.Search,
            ["FilterCategory"] = Model.FilterCategoryString,
                ["PageNumber"] = pageNumber.ToString()
        };

        return QueryHelpers.AddQueryString("", queryParams);
    }
}


@if (Model.MaxPageCount > 1)
{

    <nav class="pagination-nav">
        <ul class="pagination-list">
            @if (Model.PageNumber > 1)
            {
                <li><a href="@BuildPageLink(1)">|&lt;</a></li>
            }

            @{
                var startPage = Math.Max(1, Model.PageNumber - 1);
                var endPage = Math.Min(Model.MaxPageCount, startPage + 2);

                if (endPage - startPage < 2 && startPage > 1)
                {
                    startPage = Math.Max(1, endPage - 2);
                }
            }

            @for (int i = startPage; i <= endPage; i++)
            {
                if (i == Model.PageNumber)
                {
                    <li class="active-page">@i</li>
                }
                else
                {
                    <li><a href="@BuildPageLink(i)">@i</a></li>
                }
            }

            @if (Model.PageNumber < Model.MaxPageCount)
            {
                <li><a href="@BuildPageLink(Model.MaxPageCount)">&gt;|</a></li>
            }
        </ul>
    </nav>
}