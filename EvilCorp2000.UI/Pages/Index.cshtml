@page
@model IndexModel
@{
    ViewData["Title"] = "Villain Shop";
}

@* Seitenindividuelle Verwendung von Stylesheets *@
@section Styles {
    <link rel="stylesheet" href="~/css/shopStyle.css" />
}

<div class="hero-section">
    <div class="overlay"></div>
    <div class="hero-content">
        <h1>Welcome to the Darkest Marketplace</h1>
        <p>Premium gear for aspiring overlords</p>
    </div>
</div>


@if (@Model.RandomDiscountedProducts.Count() >= 2)
{    
    var random = new Random();
    var randomDiscountedProducts = @Model.RandomDiscountedProducts
        .OrderBy(_ => random.Next())
        .Take(2)
        .ToList();
    
    <div class="highlight-section">
        <h2>🔥 Evil Deals</h2>
        <div class="highlight-grid">
            @foreach (var product in Model.RandomDiscountedProducts)
            {
                <div class="highlight-card">

                    <div class="highlight-card-box">
                        <h3>@product.ProductName</h3>
                        @if (product.DiscountedPrice.HasValue)
                        {                            
                                <img src="@product.ProductPicture" alt="@product.ProductName" />
                                <div class="ribbon">@($"{product.Discount.Value}%")</div>
                        }
                        else
                        {
                            <img src="@product.ProductPicture" alt="@product.ProductName" />
                        }

                        <div class="ribbon">@($"{product.Discount.Value}%")</div>

                        <p>@product.Description</p>

                        @if (product.Rating.HasValue)
                        {
                            <p>@product.Rating.Value.ToString()</p>


                            double rating = product.Rating.Value; // z. B. 4.3
                            var fillPercents = Enumerable.Range(0, 5).Select(i =>
                            {
                                if (i < Math.Floor(rating)) return 100;
                                if (i > rating) return 0;
                                return (int)((rating - Math.Floor(rating)) * 100);
                            }).ToList();


                            <div class="stars-container">
                                @for (int i = 0; i < 5; i++)
                                {
                                    <span class="star-precise" style="--percent: @fillPercents[i]%">★</span>
                                }insecure
                            </div>
                        }

                        <span class="price strike">@product.Price.ToString("C")</span>
                        <span class="highlighted-price">@product.DiscountedPrice.Value.ToString("C")</span>
                        <form method="post">
                            <input type="hidden" name="productId" value="@product.ProductId" />
                            <button type="submit">Add to Cart</button>
                        </form>

                    </div>
                </div>
            }
        </div>
    </div>
}

@* Sorting UI *@
@* <div class="sorting-container">
    <form method="post">
        <label for="sortSelect">Sort by:</label>
        <select id="sortSelect" name="SortOrder" class="sorting-select" onchange="this.form.submit()">
            <option value="default" selected>Default</option>
            <option value="priceAsc">Price: Low to High</option>
            <option value="priceDesc">Price: High to Low</option>
            <option value="discountDesc">Discount: High to Low</option>
            <option value="discountAsc">Discount: Low to High</option>
        </select>
    </form>
</div>


<div class="container">
    <h2>Products</h2>
    <div class="product-grid">
        @foreach (var product in Model.ProductsForSale)
        {
            <div class="product-card">

                <h3>@product.ProductName</h3>
                @if (product.DiscountedPrice.HasValue)
                {
                    <div class="product-box">
                        <img src="@product.ProductPicture" alt="@product.ProductName" />
                        <div class="ribbon">@($"{product.Discount.Value}%")</div>
                    </div>
                }
                else
                {
                    <img src="@product.ProductPicture" alt="@product.ProductName" />
                }

                <p>@product.Description</p>

                @if (product.Rating.HasValue)
                {
                    <p>@product.Rating.Value.ToString()</p>


                    double rating = product.Rating.Value; // z. B. 4.3
                    var fillPercents = Enumerable.Range(0, 5).Select(i =>
                    {
                        if (i < Math.Floor(rating)) return 100;
                        if (i > rating) return 0;
                        return (int)((rating - Math.Floor(rating)) * 100);
                    }).ToList();


                    <div class="stars-container">
                        @for (int i = 0; i < 5; i++)
                        {
                            <span class="star-precise" style="--percent: @fillPercents[i]%">★</span>
                        }
                    </div>
                }

                @if (product.DiscountedPrice.HasValue)
                {
                    <div class="product-box">
                        <span class="price strike">@product.Price.ToString("C")</span>
                        <span class="highlighted-price">@product.DiscountedPrice.Value.ToString("C")</span>
                    </div>
                }
                else 
                {
                    <span class="price">@product.Price.ToString("C")</span>
                }
                <form method="post">
                    <input type="hidden" name="productId" value="@product.ProductId" />
                    <button type="submit">Add to Cart</button>
                </form>
            </div>
        }
    </div>
</div> *@