@page
@model ProductManagementModel
@using BusinessLayer.Models
@using EvilCorp2000.UIModels
@using EvilCorp2000.Pages.ProductManagement
@using EvilCorp2000.Pages.ProductManagement.Partials
@using static EvilCorp2000.Pages.Utilities.Utilities

@{
    ViewData["Title"] = "Product Management";
}

@section Styles {
    <link rel="stylesheet" href="~/css/backOfficeStyle.css" />
}

<div id="modalState" data-modal-state="@Model.ShowModal"></div>

<script src="/js/openModalScript.js?v=@DateTime.Now.Ticks"></script>@**@


@*Modal für AlterProduct aus der Tabelle extrahiert, damit nur eines gerendert wird*@
@if (Model.ShowModal == true && Model.SelectedProductId != Guid.Empty)
{
    <div class="modal fade modal-visible" id="newAndAlterProductModal" tabindex="-1" aria-labelledby="alterProduct" aria-hidden="true" data-bs-backdrop="static">
        @* @await Html.PartialAsync("Partials/NewAndAlterProductModalPartial", new NewProductModalPartialModel1 { ValidatedProduct = @Model.ValidatedProduct, Categories = Model.Categories, DiscountsJson = Model.DiscountsJson, ValidatedProductJson = Model.ValidatedProductJson, CategoryIdsJson = Model.CategoryIdsJson, DiscountOverlap = Model.DiscountOverlap }) *@
        @await Html.PartialAsync("Partials/NewAndAlterProductModalPartial", Model.PartialModel)
    </div>
}

@* Modal für DeleteProduct - Produktansicht muss erst umgebaut werden*@
@* @if (Model.ShowDeletionConfirmation == true)
{
    <div class="modal fade modal-visible" id="ConfirmDeleteModal" tabindex="-1" aria-labelledby="deletionConfirmation" aria-hidden="true" data-bs-backdrop="static">
        @await Html.PartialAsync("Partials/ConfirmDelete", new ConfirmDeleteModel { SelectedProductId = Model.SelectedProductId, ProductName = Model.ProductName })
    </div>
} *@

<div class="toolbar-section">
    <div class="left-action">
        <form method="post" asp-page-handler="ShowNewAndAlterProductModal">
            <input type="hidden" name="SelectedProductId" value="@Guid.Empty" />
            <button type="submit" class="btn btn-primary">Add New Product</button>
        </form>
    </div>

    <div class="center-pagination pagination-wrapper">
        @await Html.PartialAsync("_PaginationPartial", (Model.SortOrder, Model.PageNumber, Model.MaxPageCount, Model.PageSize))
    </div>
    

    @* TODO1: Als Partial machen *@
    <div class="right-sort">
        <form method="get">
            <select name="sortOrderString" class="sorting-select" onchange="this.form.submit()">
                @foreach (var order in Model.SortOrderAndDisplayStrings)
                {
                    <option value="@order.Item1" selected="@(order.Item1 == Model.SortOrder)">
                        @order.Item2
                    </option>
                }
                @* @if (order.Item1 == Model.SortOrder)
                {
                    <option value="@order.Item1" selected>@order.Item2</option>
                }
                else
                {
                    <option value="@order.Item1">@order.Item2</option>
                } *@
            </select>
        </form>
    </div>
</div>

@* <h1 class="mb-4">@ViewData["Title"]</h1> *@


@* 
<div class="d-flex justify-content-between align-items-center mb-4">

    <form method="post" asp-page-handler="ShowNewAndAlterProductModal">
        <input type="hidden" name="SelectedProductId" value="@Guid.Empty" />
        <button type="submit" class="btn btn-primary">Add New Product</button>
    </form>

    

</div> *@

@if (Model.ShowModal == true && Model.SelectedProductId == Guid.Empty)
{
    <div class="modal fade modal-visible" id="newAndAlterProductModal" tabindex="-1" aria-labelledby="newProduct" aria-hidden="true" data-bs-backdrop="static">
        @await Html.PartialAsync("Partials/NewAndAlterProductModalPartial", new NewProductModalPartialModel { ValidatedProduct = new ValidatedProduct { ProductId = Guid.Empty }, Categories = Model.Categories })
    </div>
}

@* @await Html.PartialAsync("_PaginationPartial", (Model.SortOrder, Model.PageNumber, Model.MaxPageCount, Model.PageSize)) *@


<table class="table table-striped">
    <thead >
        <tr>
            <th>Name</th>
            <th></th>
            <th class="descriptionTh">Description</th>
            <th>Price</th>
            <th>Discounts</th>
            <th>Categories</th>
            <th>Rating</th>
            <th>Amount on Stock</th>
            @if (User.Identity?.IsAuthenticated == true && User.Claims.Any(c => c.Type == "role" && (c.Value == "CEOofDoom" || c.Value == "Overseer")))
            {<th></th>}
            
        </tr>
    </thead>
    <tbody>
        @if (Model.products != null)
        {
            @foreach (ProductManagementProductDTO product in Model.products)
            {
                <tr>
                    <td>
                        <p>
                            <a href="#" data-bs-toggle="modal" data-bs-target="#productDetailsModal-@product.ProductId">@product.ProductName</a>
                            @await Html.PartialAsync("Partials/ProductDetailsModalPartial", new ProductDetailsModalPartialModel { Product = product })
                        </p>

                        
                    </td>
                    <td>
                        <p>
                            @if(!string.IsNullOrEmpty(@product.ProductPicture))
                            {
                                @* <img src="data:image/png;base64,@product.ProductPicture" class="custom-list-image" style="max-width:100px; max-height:100px; height:auto; width:auto;" /> *@
                                <img src="@product.ProductPicture" class="custom-display-image" style="max-width:100px; max-height:100px; height:auto; width:auto;" />
                            }
                        </p>
                    </td>
                    <td>
                        <p>@product.Description</p>
                    </td>
                    <td>
                        <p>@FormatAsEuro(product.Price)</p>
                    </td>
                    <td>
                        @foreach (DiscountDTO discount in @product.Discounts)
                        {
                            <p>@discount.StartDate.ToShortDateString() - @discount.EndDate.ToShortDateString() -@discount.DiscountPercentage%</p>
                            {
                                var discountedPrice = @product.Price / 100.0m * (100.0m - ((decimal)discount.DiscountPercentage));
                                <p>Discounted Price: @FormatAsEuro(@discountedPrice)</p>
                            }
                            
                        }
                    </td>
                    <td>
                        @foreach (CategoryDTO category in product.Categories)
                        {
                            <p>@category.CategoryName</p>
                        }
                    </td>
                    <td>
                        <p>@product.Rating</p>
                    </td>
                    <td>
                        <p>@product.AmountOnStock</p>
                    </td>


                    <td>
                        @* Button öffnet Modal zum Ändern der Daten *@
                        <form method="post" asp-page-handler="ShowNewAndAlterProductModal">
                            @* <input type="hidden" name="SelectedProductId" value="@product.ProductId, Model.SortOrder, Model.PageNumber, Model.PageSize" /> *@
                            <input type="hidden" name="SelectedProductId" value="@product.ProductId" />
                            <input type="hidden" name="sortOrderString" value="@Model.SortOrder" />
                            <input type="hidden" name="pageNumber" value="@Model.PageNumber" />
                            <input type="hidden" name="pageSize" value="@Model.PageSize" />
                                <button type="submit" class="btn-alter">Alter</button>
                        </form>
                        @if (User.Identity?.IsAuthenticated == true && User.Claims.Any(c => c.Type == "role" && (c.Value == "CEOofDoom" || c.Value == "Overseer")))
                        {
                            @* TODO1: Warning Modal einbauen *@
                            <form method="post" asp-page-handler="DeleteProduct">
                                <input type="hidden" name="productId" value="@product.ProductId" />
                                    <button type="submit" class="btn-delete">Delete</button>
                            </form>
                        }
                    </td>
                    
                        

                    
                </tr>
            }
        }
        
    </tbody>
</table>

@await Html.PartialAsync("_PaginationPartial", (Model.SortOrder, Model.PageNumber, Model.MaxPageCount, Model.PageSize))

